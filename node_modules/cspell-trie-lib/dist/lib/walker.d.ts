import { TrieNode } from './TrieNode';
export declare const JOIN_SEPARATOR: string;
export declare const WORD_SEPARATOR: string;
export interface YieldResult {
    text: string;
    node: TrieNode;
    depth: number;
}
export declare enum CompoundWordsMethod {
    /**
     * Do not compound words.
     */
    NONE = 0,
    /**
     * Create word compounds separated by spaces.
     */
    SEPARATE_WORDS = 1,
    /**
     * Create word compounds without separation.
     */
    JOIN_WORDS = 2
}
export interface WalkerIterator extends Generator<YieldResult, any, boolean | undefined> {
}
/**
 * Walks the Trie and yields a value at each node.
 * next(goDeeper: boolean):
 */
export declare function walker(root: TrieNode, compoundingMethod?: CompoundWordsMethod): WalkerIterator;
export interface Hinting {
    goDeeper: boolean;
}
export interface HintedWalkerIterator extends Generator<YieldResult, any, Hinting | undefined> {
}
/**
 * Walks the Trie and yields a value at each node.
 * next(goDeeper: boolean):
 */
export declare function hintedWalker(root: TrieNode, compoundingMethod: CompoundWordsMethod | undefined, hint: string): HintedWalkerIterator;
